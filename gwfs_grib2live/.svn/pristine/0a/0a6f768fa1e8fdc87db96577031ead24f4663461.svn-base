package com.supermap.gwfs.grib2convert.test;

import java.io.File;
import java.io.FileFilter;
import java.util.ArrayList;
import java.util.List;

import com.supermap.gwfs.grib2convert.handler.Grib2ConvertThread;
import com.supermap.gwfs.grib2convert.util.TimeUtil;

public class TestClipGrab {
	public static void main(String[] args) {
		long lStart = System.currentTimeMillis();

		new Grib2ConvertThread("C:\\Users\\LQ\\Desktop\\Z_NWGD_C_BABJ_20170117072458_P_RFFC_SCMOC-TMIN_201701172000_24024.GRB2").run();
//		new Grib2ConvertThread("E:/data/EN_grads_data/origin/ER03/20161224/20/Z_NWGD_C_BABJ_20161224110027_P_RFFC_SCMOC-ER03_201612242000_24003.GRB2").run();
//		new Grib2ConvertThread("E:/data/EN_grads_data/origin/TMP/20161225/08/Z_NWGD_C_BABJ_20161224201325_P_RFFC_SCMOC-TMP_201612250800_24003.GRB2").run();
//		 File[] gribFiles = searchFile(new File("E:/data/EN_grads_data/origin/EDA10"));
//		 System.out.println(gribFiles.length + " 个文件待转换");
//		 for (File file : gribFiles) {
////		 System.out.println(file.getAbsolutePath());
//		 new Grib2ConvertThread(file.getAbsolutePath()).run();
//		 }
		 System.out.println("==============================转换完成===================================");
		 System.out.println("================================END====================================");
		System.out.println(TimeUtil.formatDuring(lStart, System.currentTimeMillis()));

	}

	/**
	 * searchAllFiles
	 * 
	 * @param folder
	 * @return
	 */
	public static File[] searchFile(File folder) {
		File[] subFolders = folder.listFiles(new FileFilter() {// 运用内部匿名类获得文件
					public boolean accept(File pathname) {// 实现FileFilter类的accept方法
						if (pathname.isDirectory() || pathname.isFile())// 目录
							return true;
						return false;
					}
				});
		List<File> result = new ArrayList<File>();// 声明一个集合
		for (int i = 0; i < subFolders.length; i++) {// 循环显示文件夹或文件
			if (subFolders[i].isFile()) {// 如果是文件则将文件添加到结果列表中
				if (subFolders[i].getAbsolutePath().contains("00000.GRB2") || subFolders[i].getAbsolutePath().contains(".tmp")) {
					continue;
				}
				result.add(subFolders[i]);
			} else {// 如果是文件夹，则递归调用本方法，然后把所有的文件加到结果列表中
				File[] foldResult = searchFile(subFolders[i]);
				for (int j = 0; j < foldResult.length; j++) {// 循环显示文件
					result.add(foldResult[j]);// 文件保存到集合中
				}
			}
		}

		File files[] = new File[result.size()];// 声明文件数组，长度为集合的长度
		result.toArray(files);// 集合数组化
		return files;

	}
}
