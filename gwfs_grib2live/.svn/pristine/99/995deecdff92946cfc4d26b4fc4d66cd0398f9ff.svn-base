package com.supermap.gwfs.grib2convert.util;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Properties;

import org.apache.commons.dbcp.BasicDataSource;

/**
 * 使用连接池技术管理数据库连接
 * @author 刘强
 *
 */
public class DBUtil {
	// 数据库连接池
	private static BasicDataSource ds;
	// 为不同线程管理连接
	private static ThreadLocal<Connection> threadLocal;

	static {
		try {
			// 读配置文件
			Properties prop = new Properties();
			InputStream is = DBUtil.class.getClassLoader().getResourceAsStream("com/supermap/gwfs/grib2convert/util/config.properties");
			prop.load(is);
			is.close();
			// 初始化连接池
			ds = new BasicDataSource();
			// 设置驱动
			ds.setDriverClassName(prop.getProperty("driver").trim());
			// 设置url
			ds.setUrl(prop.getProperty("url").trim());
			// 设置数据库用户名
			ds.setUsername(prop.getProperty("username").trim());
			// 设置数据库密码
			ds.setPassword(prop.getProperty("password").trim());
			// 初始连接数量
			ds.setInitialSize(Integer.parseInt(prop.getProperty("initialSize").trim()));
			// 连接池允许最大连接数量
			ds.setMaxActive(Integer.parseInt(prop.getProperty("maxActive").trim()));
			// 设置最大等待时间
			ds.setMaxWait(Integer.parseInt(prop.getProperty("maxWait").trim()));
			// 设置最小空闲数
			ds.setMinIdle(Integer.parseInt(prop.getProperty("minIdle").trim()));
			// 设置最大空闲数
			ds.setMaxIdle(Integer.parseInt(prop.getProperty("maxIdle").trim()));
			// 初始化线程本地
			threadLocal = new ThreadLocal<Connection>();
		} catch (IOException e) {
			
		}

	}

	public static Connection getConnection() throws SQLException {
		Connection conn = threadLocal.get();
		if (conn == null || !conn.isValid(0)) {
			conn = ds.getConnection();
			threadLocal.set(conn);
		}
		return conn;
	}

	public static void closeConnection() {
		try {
			Connection conn = threadLocal.get();
			if (conn != null) {
				// 恢复连接为自动提交事务
				conn.setAutoCommit(true);
				/*
				 * 通过连接池获取的connection 的close()方法实际上并没有将 连接关闭，而是将该连接归还。
				 */
				conn.close();
				threadLocal.remove();
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
